services:
    init:
        image: alpine:latest
        command: sh -c "mkdir -p /data/mongodb /data/redis /data/kafka"
        volumes:
            - ./data:/data
        networks:
            - todo_net

    api:
        build:
            context: .
            dockerfile: docker/api/Dockerfile
        ports:
            - "${PORT}:${PORT}"
        environment:
            - NODE_ENV=${NODE_ENV}
            - MONGODB_URI=${MONGODB_URI}
            - REDIS_URI=${REDIS_URI}
            - KAFKA_BROKER=${KAFKA_BROKER}
        depends_on:
            mongodb:
                condition: service_healthy
            redis:
                condition: service_healthy
            kafka:
                condition: service_healthy
        env_file:
            - .env
        networks:
            - todo_net
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 2G

    mongodb:
        image: mongo:6
        ports:
            - "27017:27017"
        depends_on:
            init:
                condition: service_started
        volumes:
            - mongodb_data:/data/db
        networks:
            - todo_net
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
            interval: 10s
            retries: 5
            start_period: 10s
            timeout: 5s
        deploy:
            resources:
                limits:
                    cpus: "2"
                    memory: 4G

    redis:
        image: redis:7-alpine
        command: redis-server --appendonly yes
        ports:
            - "6379:6379"
        depends_on:
            init:
                condition: service_started
        volumes:
            - redis_data:/data
        networks:
            - todo_net
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            retries: 5
            start_period: 10s
            timeout: 3s
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 2G

    zookeeper:
        image: confluentinc/cp-zookeeper:7.8.0
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        ports:
            - "2181:2181"
        networks:
            - todo_net
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "2181"]
            interval: 10s
            retries: 5
            start_period: 10s
            timeout: 5s
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 2G

    kafka:
        image: confluentinc/cp-kafka:7.8.0
        ports:
            - "9092:9092"
        depends_on:
            init:
                condition: service_started
            zookeeper:
                condition: service_healthy
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
            KAFKA_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092"
            KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
            KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        volumes:
            - kafka_data:/var/lib/kafka/data
        networks:
            - todo_net
        healthcheck:
            test:
                [
                    "CMD",
                    "kafka-topics",
                    "--bootstrap-server",
                    "kafka:29092",
                    "--list",
                ]
            interval: 15s
            retries: 5
            start_period: 15s
            timeout: 5s
        deploy:
            resources:
                limits:
                    cpus: "2"
                    memory: 4G

volumes:
    mongodb_data:
    redis_data:
    kafka_data:

networks:
    todo_net:
        driver: bridge
